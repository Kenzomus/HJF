<?php
//sandbox=true;
//require_once('includes/config.inc');

/**
 * Mail a letter.
 */
define('MAIL_LETTER', 'Mail a letter');

/**
 * EMail a letter.
 */
define('EMAIL_LETTER', 'Email a letter');

/**
 * Mail a card.
 */
define('MAIL_CARD', 'Mail a card');

/**
 * Email a card.
 */
define('EMAIL_CARD', 'Email a card');

/**
 * Credit card.
 */
define('CREDIT_CARD', 'credit_card');

/**
 * Check.
 */
define('CHECK', 'check');

//test

 //* Customer ID.

//variable_set('donate_customer_id', variable_get('donate_customer_id'));

/**
 * Invoice ID.
 */

variable_set('donate_invoice_id', variable_get('donate_invoice_id'));




function mypaypal_menu(){
  $items['donate'] = array(
    'title' => t('Donate for Military Medical Education and Research'),
	'page callback' => 'drupal_get_form',
    'page arguments' => array('donate_form'),
    'access callback' => TRUE,
    //'file' => 'temp_donate_form_page_form.inc',
  );
    //page callback' => 'example_page',
    //'access arguments' => array('access content'),
    //'type' => MENU_SUGGESTED_ITEM,
  
 

  return $items;

}

function donate_form(){
	$form['HJF_donation'] = array(
	    '#type' => 'markup',

	    '#markup' => t('Support military-relevant medical research projects at USU and throughout the military; provide continuing education opportunities and resources for military healthcare providers and researchers..'),
	    '#suffix' => '</div>',
	  );
	$form['selected'] = array(
    '#type' => 'select',
    '#title' => t('Selected'),
    '#options' => array(
      0 => t('Support USU'),
      1 => t('Research and education'),
    ),
    '#default_value' => $category['selected'],
    '#description' => t('Please Select the project to support.'),
  );
$form['donation_amount'] = array(
    '#type' => 'select',
    '#title' => t('Donation amount'),
    '#options' => array(
                    '20'=>'$20',
                    '25'=>'$25',
                    '50'=>'$50',
                    '100'=>'$100',
                    '250'=>'$250',
                    '1000'=>'$1000',
                    '1500'=>'$1500',
                    'other' => t('Other'),
    ),
    '#default_value' =>!empty($form_state['values']['donation_amount']) ? $form_state['values']['donation_amount'] : '20',
     '#ajax' => array(
      'callback' => 'donation_other_amount_ajax_callback',
      'wrapper' => 'donation-other-amount-wrapper',
    ),
  );

 $form['payment_type'] = array(
    '#type' => 'radios',
    '#title' => t('Payment type'),
    '#options' => array(CREDIT_CARD => t('Credit Card'), CHECK => t('Personal/Business Check')),
    '#default_value' =>!empty($form_state['values']['payment_type']) ? $form_state['values']['payment_type'] : CREDIT_CARD,
  );

$form['donation_payment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment method'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['donation_payment']['check'] = array(
    '#type' => 'item',

    '#markup' => '<p>'. t('If you would like to pay by check, please review and submit the donation then print and mail a copy with a check to:'). '</p>'.'<p>HJF Attn: Donation<br>s 6720-A Rockledge Drive Suite 100<br> Bethesda, MD 208174</p>',

    '#states' => array(
      'visible' => array(
        ':input[name="payment_type"]' => array( 'value' => CHECK),
      ),
    ),
  );

  $form['donation_payment']['card_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number'),
    '#maxlength' => 19,
    '#size' => 20,
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['card_num']) ? $form_state['values']['card_num'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="payment_type"]' => array( 'value' => CREDIT_CARD),
      ),
    ),
  );

  $form['donation_payment']['card_holder_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name on card'),
    '#maxlength' => 64,
    '#size' => 32,
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['card_holder_name']) ? $form_state['values']['card_holder_name'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="payment_type"]' => array('value' => CREDIT_CARD)
      ),
    ),
  );

  $form['donation_payment']['card_cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('Security code'),
    '#size' => 4,
    '#maxlength' => 4,
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['card_cvv']) ? $form_state['values']['card_cvv'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="payment_type"]' => array('value' => CREDIT_CARD)
      ),
    ),
    '#field_suffix' => theme('donate_credit_cvv_help'),

  );

  $form['donation_payment']['card_exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration date'),
    '#options' => donate_months(),
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['card_exp_month']) ? $form_state['values']['card_exp_month'] : '01',
    '#states' => array(
      'visible' => array(
        ':input[name="payment_type"]' => array('value' => CREDIT_CARD)
      ),
    ),
  );

   $form['donation_payment']['card_exp_year'] = array(
    '#type' => 'select',
    '#options' => donate_years(),
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['card_exp_year']) ? $form_state['values']['card_exp_year'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="payment_type"]' => array('value' => CREDIT_CARD)
      ),
    ),
  );

  //Billing Address fieldset.
  $form['donation_billing_address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing address'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="payment_type"]' => array( 'value' => CREDIT_CARD),
      ),
    ),
  );

  $form['donation_billing_address']['bill_fname'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#size' => 60,
    '#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_fname']) ? $form_state['values']['bill_fname'] : '',
  );

  $form['donation_billing_address']['bill_lname'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#size' => 60,
    '#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_lname']) ? $form_state['values']['bill_lname'] : '',
  );

  $form['donation_billing_address']['bill_address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 1'),
    '#size' => 60,
    '#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_address1']) ? $form_state['values']['bill_address1'] : '',
  );

   $form['donation_billing_address']['bill_address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 2'),
    '#size' => 60,
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_address2']) ? $form_state['values']['bill_address2'] : '',
  );

  $form['donation_billing_address']['bill_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 60,
    '#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_city']) ? $form_state['values']['bill_city'] : '',
  );

  $form['donation_billing_address']['bill_states'] = array(
    '#type' => 'select',
    '#title' => t('States'),
    '#options' => donate_us_states_list(),
    '#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_states']) ? $form_state['values']['bill_states'] : '',
  );


 $form['donation_billing_address']['bill_zipcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip code'),
    '#size' => 6,
    '#maxlength' => 5,
    '#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_zipcode']) ? $form_state['values']['bill_zipcode'] : '',
  );

   $form['donation_billing_address']['bill_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#size' => 15,
    '#maxlength' => 15,
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_phone']) ? $form_state['values']['bill_phone'] : '',
  );

   $form['donation_billing_address']['bill_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_email']) ? $form_state['values']['bill_email'] : '',
  );   

 $form['donation_billing_address']['bill_subcribe_newsletter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Yes, I would like to sign up for the newsletter.'),
    //'#required' => TRUE,
    '#default_value' =>!empty($form_state['values']['bill_subcribe_newsletter']) ? $form_state['values']['bill_subcribe_newsletter'] : 0,
  );     

  //Thank You fieldset.
  $form['donation_thank_you'] = array(
    '#type' => 'fieldset',
    '#title' => t('Thank you for making your donation'),
    '#collapsible' => FALSE,
    '#collapsed'  => FALSE,
  );

  $form['donation_thank_you']['thank_you_type'] = array(
    '#type' => 'radios',
    '#options' => drupal_map_assoc(array(t(MAIL_LETTER), t(EMAIL_LETTER))),
    '#title' => t('How would you like to be thanked?'),
    '#default_value' =>!empty($form_state['values']['thank_you_type']) ? $form_state['values']['thank_you_type'] : MAIL_LETTER,
  );

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Review Donation'),
    '#submit' => array('donate_form_next_submit'),
    '#validate' => array('donate_form_next_validate'),
  );


  $form['donation_other_amount'] = array(
    '#type' => 'markup',
    '#title_display' => 'invisible',
    '#prefix' => '<div id="donation-other-amount-wrapper">',
    '#suffix' => '</div>',
  );

  if (!empty($form_state['values']['donation_amount']) && $form_state['values']['donation_amount'] == 'other') {
    $form['donation_other_amount']['#type'] = 'textfield';
    $form['donation_other_amount']['#field_prefix'] = '$';
    $form['donation_other_amount']['#size'] = 15;
//    $form['donation_other_amount']['#required'] = TRUE;
    $form['donation_other_amount']['#default_value'] = !empty($form_state['values']['donation_other_amount']) ? $form_state['values']['donation_other_amount'] : '';
  }

 

 return $form;
}
function donate_months() {
  return array(
    '01' => t('January'),
    '02' => t('February'),
    '03' => t('March'),
    '04' => t('April'),
    '05' => t('May'),
    '06' => t('June'),
    '07' => t('July'),
    '08' => t('August'),
    '09' => t('September'),
    '10' => t('October'),
    '11' => t('November'),
    '12' => t('December'),
  );
}
/**
 * Credit card experation years.
 */
function donate_years(){
  $current_year_2 = date('y');
  $current_year_4 = date('Y');

  $years = array();

  for ($i = 0; $i < 10; $i++) {
    $years[$current_year_2 + $i] = str_pad($current_year_4 + $i, 2, '0', STR_PAD_LEFT);
  }

  return $years;
}


function donate_us_states_list() {
  return array(
      ''   => t('--'),
      'AL' => t('Alabama'),
      'AK' => t('Alaska'),
      'AZ' => t('Arizona'),
      'AR' => t('Arkansas'),
      'CA' => t('California'),
      'CO' => t('Colorado'),
      'CT' => t('Connecticut'),
      'DE' => t('Delaware'),
      'DC' => t('District Of Columbia'),
      'FL' => t('Florida'),
      'GA' => t('Georgia'),
      'HI' => t('Hawaii'),
      'ID' => t('Idaho'),
      'IL' => t('Illinois'),
      'IN' => t('Indiana'),
      'IA' => t('Iowa'),
      'KS' => t('Kansas'),
      'KY' => t('Kentucky'),
      'LA' => t('Louisiana'),
      'ME' => t('Maine'),
      'MD' => t('Maryland'),
      'MA' => t('Massachusetts'),
      'MI' => t('Michigan'),
      'MN' => t('Minnesota'),
      'MS' => t('Mississippi'),
      'MO' => t('Missouri'),
      'MT' => t('Montana'),
      'NE' => t('Nebraska'),
      'NV' => t('Nevada'),
      'NH' => t('New Hampshire'),
      'NJ' => t('New Jersey'),
      'NM' => t('New Mexico'),
      'NY' => t('New York'),
      'NC' => t('North Carolina'),
      'ND' => t('North Dakota'),
      'OH' => t('Ohio'),
      'OK' => t('Oklahoma'),
      'OR' => t('Oregon'),
      'PA' => t('Pennsylvania'),
      'RI' => t('Rhode Island'),
      'SC' => t('South Carolina'),
      'SD' => t('South Dakota'),
      'TN' => t('Tennessee'),
      'TX' => t('Texas'),
      'UT' => t('Utah'),
      'VT' => t('Vermont'),
      'VA' => t('Virginia'),
      'WA' => t('Washington'),
      'WV' => t('West Virginia'),
      'WI' => t('Wisconsin'),
      'WY' => t('Wyoming'),
      ' ' => t('--'),
      'AS' => t('American Samoa'),
      'FM' => t('Federated States of Micronesia'),
      'GU' => t('Guam'),
      'MH' => t('Marshall Islands'),
      'MP' => t('Northern Mariana Islands'),
      'PW' => t('Palau'),
      'PR' => t('Puerto Rico'),
      'VI' => t('Virgin Islands'),
    );
  
}
function donate_form_next_validate($form, &$form_state) {
  
  if($form_state['values']['donation_amount'] == 'other'){
    $donation_other_amount = $form_state['values']['donation_other_amount'];
    if( empty($donation_other_amount) ) {
      form_set_error('donation_other_amount', t('Please enter donation other amount.'));
    }
   /* 
    else if(!donate_validate_other_amount_number($donation_other_amount)) {
      form_set_error('donation_other_amount', t('Please enter a valid number for donation amount.'));
    }
    */
  }
  
  $payment_type = $form_state['values']['payment_type'];  
  if($payment_type == CREDIT_CARD){
    $card_num =  $form_state['values']['card_num'];
    if( empty($card_num) || !donate_validate_credit_card_number($card_num)){
      form_set_error('card_num', t('Please enter a valid credit card number.'));
    }
    
    $card_name =  $form_state['values']['card_holder_name'];
     if(empty($card_name)){
      form_set_error('card_holder_name', t('Please enter the name one your credit card.'));
    }
    
    $card_exp_month = $form_state['values']['card_exp_month'];
    $card_exp_year = $form_state['values']['card_exp_year'];
    if (donate_validate_credit_card_start_date($card_exp_month,$card_exp_year)) {
      form_set_error('card_exp_month', t('You have entered an expired credit card.'));
    }
    
    $card_cvv = $form_state['values']['card_cvv'];
    if(!donate_validate_credit_card_security_code($card_num,$card_cvv)) {
      form_set_error('card_cvv', t('You have entered an invalid card security code.'));
    }
    
    if(empty($form_state['values']['bill_fname'])){
      form_set_error('bill_fname', t('Please enter you billing first name.'));
    }
    
    if(empty($form_state['values']['bill_lname'])){
      form_set_error('bill_lname', t('Please enter you billing last name.'));
    }
    
    if(empty($form_state['values']['bill_address1'])){
      form_set_error('bill_address1', t('Please enter you billing address.'));
    }
    
    if(empty($form_state['values']['bill_city'])){
      form_set_error('bill_city', t('Please enter you billing city.'));
    }
    
    if(empty($form_state['values']['bill_states'])){
      form_set_error('bill_city', t('Please enter you billing state.'));
    }
    
    if(empty($form_state['values']['bill_zipcode'])){
      form_set_error('bill_city', t('Please enter you billing zipcode.'));
    }
    
    if (!valid_email_address($form_state['values']['bill_email'])) {
      form_set_error('bill_email', t('That e-mail address is not valid.'));
    }
    
 } 

}




/**
 * Implement hook_mail().
 */
function temp_donate_form_mail($key, &$message, $params) {
  global $user;
  $left_blank = "left blank";
  $values = $params;
  
  $options = array(
    'langcode' => $message['language']->language,
  );
  
  switch ($key) {
    case 'donation_information':
      $message['subject'] = 'Donation has been approved';
      $message['body'][] = t('Please keep this donation information for your record.');
      
      $body = '';
      $body .= '<p>';
      
      $body .= 'PNRef#: ' . variable_get('donate_pnref') . '<br>';  
      
      $body .= 'Donation to: ' . $values['donation_type'] . '<br>';
      $body .= 'Donation type: ' . $values['donation_type_select'] . '<br>';
      
      $donate_amount = '$'. $values['donation_amount'];
      if ($values['donation_amount'] == 'other') {
        $donate_amount = '$'.$values['donation_other_amount'];
      }
      
      $body .= 'Donation amount: ' . $donate_amount . '<br>';
      $body .= 'Payment type: ' . $values['payment_type'] . '<br>';
      $body .= '</p>';
      
      $body .= '<p>';
      $body .= '------------Billing address----------<br>';
      $body .= 'Name: ' . $values['bill_fname'] . ' ' . $values['bill_lname']  .  '<br>';
      $body .= 'Address 1: ' . $values['bill_address1'] . '<br>';
      
      if(empty($values['bill_address2'])){
        $body .= 'Address 2: ' . $left_blank . '<br>';  
      }else{
        $body .= 'Address 2: ' . $values['bill_address2'] . '<br>';  
      }
      
      $body .= 'City: ' . $values['bill_city'] . '<br>';
      $body .= 'State: ' . $values['bill_states'] . '<br>';
      $body .= 'Zipcode: ' . $values['bill_zipcode'] . '<br>';
      
      if(empty($values['bill_phone'])){
        $body .= 'Phone: ' . $left_blank . '<br>';
      }else{
        $body .= 'Phone: ' . $values['bill_phone'] . '<br>';  
      }
      
      if(empty($values['bill_email'])){
        $body .= 'Email: ' . $left_blank . '<br>';
      }else{
        $body .= 'Email: ' . $values['bill_email'] . '<br>';
      }
      
      $body .= 'Sign up newsletter: ' . $values['bill_subcribe_newsletter'] . '<br>';
      $body .= '</p>';
      
      //dedicate info
      if($values['donation_type_select'] == 'In Memoriam' || $values['donation_type_select'] == 'In Honor'){
        $body .= '<p>';
        $body .= '----Information of '. $values['donation_type_select'] .'-----<br>';
        $body .= 'Name: ' . $values['dedicate_name'] . '<br>';
        $body .= '</p>';
        
        if( $values['donation_acknowledgement_question'] == 1 && $values['ack_type'] == MAIL_CARD){
          $body .= '<p>';
          $body .= '-----Mail an acknowledgement card to person below----<br>';
          $body .= 'Title: ' . $values['ack_title'] . '<br>';
          $body .= 'First name: ' . $values['ack_fname'] . '<br>';
          $body .= 'Middle name: ' . $values['ack_midname'] . '<br>';
          $body .= 'Last name: ' . $values['ack_lname'] . '<br>';
          $body .= 'Address 1: ' . $values['ack_address1'] . '<br>';
          $body .= 'Address 2: ' . $values['ack_address2'] . '<br>';
          $body .= 'City: ' . $values['ack_city'] . '<br>';
          $body .= 'State: ' . $values['ack_states'] . '<br>';
          $body .= 'Zipcode: ' . $values['ack_zipcode'] . '<br>';
          $body .= 'Message: ' . $values['ack_message'] . '<br>';
          $body .= 'Sender name: ' . $values['ack_sender_name'] . '<br>';
          $body .= '</p>';
        }else if ($values['ack_type'] == EMAIL_CARD) {
          $body .= '<p>';
          $body .= 'An acknowledgement email card has been sent.';
          $body .= '</p>';
        }
        
      }
      
      //thank you info
      if($values['thank_you_type'] == MAIL_CARD){
        $body .= '</p>';
        $body .= 'Mail a thank you letter type: Mail a card<br>';
        $body .= '</p>';
      }else{
        $body .= '</p>';
        $body .= 'Mail a thank you letter type: Email a card<br>';
        $body .= '</p>';
      }
      
      $message['body'][] = $body;
      
      //$message['body'][] = 'Donation amount: ' . $params['donation_type_select'];
      
      break;
  }  
  
}


/**
 * Validates a credit card number using the Luhn algorithm.
 *
 * @param $number
 *   The credit card number to validate.
 *
 * @return
 *   TRUE or FALSE indicating the number's validity.
 *
 * @see http://www.merriampark.com/anatomycc.htm
 */
function donate_validate_credit_card_number($number) {
  // Ensure every character in the number is numeric.
  if (!ctype_digit($number)) {
    return FALSE;
  }

  // Validate the number using the Luhn algorithm.
  $total = 0;

  for ($i = 0; $i < strlen($number); $i++) {
    $digit = substr($number, $i, 1);
    if ((strlen($number) - $i - 1) % 2) {
      $digit *= 2;
      if ($digit > 9) {
        $digit -= 9;
      }
    }
    $total += $digit;
  }

  if ($total % 10 != 0) {
    return FALSE;
  }

  return TRUE;
}


/**
 * Validates a credit card start date.
 *
 * @param $month
 *   The 1 or 2-digit numeric representation of the month, i.e. 1, 6, 12.
 * @param $year
 *   The 2-digit numeric representation of the year, i.e. 13.
 *
 * @return
 *   TRUE for cards whose start date is blank (both month and year) or in the
 *   past, 'year' or 'month' for expired cards indicating which value should
 *   receive the error.
 */
function donate_validate_credit_card_start_date($month, $year) {

  if ($month < date('m') && ($year == date('y')) )
    return TRUE;
 
  return FALSE;

}


/**
 * Validates a card security code based on the type of the credit card.
 *
 * @param $number
 *   The number of the credit card to validate the security code against.
 * @param $code
 *   The card security code to validate with the given number.
 *
 * @return
 *   TRUE or FALSE indicating the security code's validity.
 */
function donate_validate_credit_card_security_code($number, $code) {
  // Ensure the code is numeric.
  if (!ctype_digit($code)) {
    return FALSE;
  }

  // Check the length based on the type of the credit card.
  switch (substr($number, 0, 1)) {
    case '3':
      if (strlen($number) == 15) {
        return strlen($code) == 4;
      }
      else {
        return strlen($code) == 3;
      }

    case '4':
    case '5':
    case '6':
      return strlen($code) == 3;
  }
}



$api_request_param = array(
'METHOD'=>'DodirectPayment',
'PAYMENTACTION'=>'Sale',
'user' =>  'kenzomus-facilitator_api1.juno.com',
'password'=> '1408667762',
'signature'=>'AHJDR7kGx5QNCNAAQB0nSG0r-.fDA2QqnqqslqeyMMzwL3hy-4Xhla9h',
'IPADDRESS'=>'api.sandbox.paypal.com',
'CREDITCARDTYPE'=> 'visa',
'ACCT'=>'4032036707456784',
'EXPDATE'=>'8/2019 ',
'CVV2'=>'275',
'AMT'=>'1000',
 	
);

$api_string ="";
foreach($api_request_param as $val =>$val)
$api_string .= '&'.$val.'='.urlencode($val);

$api_endpoint = 'api.sandbox.paypal.com';
$curl =curl_init();
curl_setopt($curl,CURLOPT_URL, $api_endpoint);
curl_setopt($curl,CURLOPT_VERBOSE ,1);
curl_setopt($curl,CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($curl,CURLOPT_RETURNTRANSFER,1);
curl_setopt($curl, CURLOPT_POST, TRUE);
curl_setopt($curl, CURLOPT_POSTFIELDS,$api_string);
$result = curl_exec($curl);
curl_close($curl);
echo $result;
