<?php

/**
 * @file
 * A donation page.
 */
 

 
/**
 * Donation type: USU.
 */
define('USU', 'Support USU '); 

/**
 * Donation type: Research_EDU.
 */
define('support_research_EDU', 'Support_Research_Education');

/**
 * Donation type: Other.
 */
define('Other', 'Other');


/**
 * Mail a letter.
 */
define('MAIL_LETTER', 'Mail a letter');

/**
 * EMail a letter.
 */
define('EMAIL_LETTER', 'Email a letter');

/**
 * Mail a card.
 */
define('MAIL_CARD', 'Mail a card');

/**
 * Email a card.
 */
define('EMAIL_CARD', 'Email a card');

/**
 * Credit card.
 */
define('CREDIT_CARD', 'credit_card');

/**
 * Check.
 */
define('CHECK', 'check');

//test

/**
*define('PL_API_USERNAME', 'Ibrahima5290_API');
*define('PL_TRANSACTION_KEY', 'Xa3nfXx`9^w`QX6G');
*define('PL_SINGLE_CREDIT_CARD_URL', 'https://uat.payleap.com/TransactServices.svc/ProcessCreditCard');
*define('PL_RECURRING_CREDIT_CARD_URL', 'https://uat.payleap.com/MerchantServices.svc/AddRecurringCreditCard');
*define('PL_RECURRING_PROCESS_CREDIT_CARD_URL', 'https://uat.payleap.com/MerchantServices.svc/ProcessCreditCard');
*/
//define('PL_VENDOR_ID','1085');

//production
/*
*define('PL_API_USERNAME', 'navy0724_API');
*define('PL_TRANSACTION_KEY', 'Dk4~Wg^T^ZnCA7uC');
*define('PL_SINGLE_CREDIT_CARD_URL', 'https://secure1.payleap.com/TransactServices.svc/ProcessCreditCard');
*define('PL_RECURRING_CREDIT_CARD_URL', 'https://secure1.payleap.com/MerchantServices.svc/AddRecurringCreditCard');
*define('PL_RECURRING_PROCESS_CREDIT_CARD_URL', 'https://secure1.payleap.com/MerchantServices.svc/ProcessCreditCard');
*define('PL_VENDOR_ID','6203');
*/

/**
 * Customer ID.
 */
variable_set('donate_customer_id', variable_get('donate_customer_id'));

/**
 * Invoice ID.
 */:wq

variable_set('donate_invoice_id', variable_get('donate_invoice_id'));


/**
 *Implement hook_init()
 */
function temp_donate_form_init() {
  
  //check if profile page is opened
  if(arg(0) =='donate') {
    drupal_add_js(drupal_get_path('module','temp_donate_form') . '/js/donate.js');
  }
  
}



 /**
 * Implements hook_theme().
 */
function temp_donate_form_theme() {
  return array(
    'donate_credit_cvv_help' => array(
      'file' => 'temp_donate_form_credit.theme.inc',
    ),
  );
}



 /**
  * Implement hook_menu().
  */
function temp_donate_form_menu() {
  $items = array();

  $items['temp_donate_form/donation2'] = array(
    'title' => t('Donate to support the mission of the Uniformed Services University (USU).'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('donate_form'),
    'access callback' => TRUE,
    'file' => 'temp_donate_form_page_form.inc',
  );

  $items['temp_donate_form/credit-cart/cvv-info'] = array(
    'title' => 'CVV Information',
    'page callback' => 'donate_credit_cvv_info',
   'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'temp_donate_form_credit.pages.inc',
  );
  return $items;
}

/**
 * Implement hook_mail().
 */
function temp_donate_form_mail($key, &$message, $params) {
  global $user;
  $left_blank = "left blank";
  $values = $params;
  
  $options = array(
    'langcode' => $message['language']->language,
  );
  
  switch ($key) {
    case 'donation_information':
      $message['subject'] = 'Donation has been approved';
      $message['body'][] = t('Please keep this donation information for your record.');
      
      $body = '';
      $body .= '<p>';
      
      $body .= 'PNRef#: ' . variable_get('donate_pnref') . '<br>';  
      
      $body .= 'Donation to: ' . $values['donation_type'] . '<br>';
      $body .= 'Donation type: ' . $values['donation_type_select'] . '<br>';
      
      $donate_amount = '$'. $values['donation_amount'];
      if ($values['donation_amount'] == 'other') {
        $donate_amount = '$'.$values['donation_other_amount'];
      }
      
      $body .= 'Donation amount: ' . $donate_amount . '<br>';
      $body .= 'Payment type: ' . $values['payment_type'] . '<br>';
      $body .= '</p>';
      
      $body .= '<p>';
      $body .= '------------Billing address----------<br>';
      $body .= 'Name: ' . $values['bill_fname'] . ' ' . $values['bill_lname']  .  '<br>';
      $body .= 'Address 1: ' . $values['bill_address1'] . '<br>';
      
      if(empty($values['bill_address2'])){
        $body .= 'Address 2: ' . $left_blank . '<br>';  
      }else{
        $body .= 'Address 2: ' . $values['bill_address2'] . '<br>';  
      }
      
      $body .= 'City: ' . $values['bill_city'] . '<br>';
      $body .= 'State: ' . $values['bill_states'] . '<br>';
      $body .= 'Zipcode: ' . $values['bill_zipcode'] . '<br>';
      
      if(empty($values['bill_phone'])){
        $body .= 'Phone: ' . $left_blank . '<br>';
      }else{
        $body .= 'Phone: ' . $values['bill_phone'] . '<br>';  
      }
      
      if(empty($values['bill_email'])){
        $body .= 'Email: ' . $left_blank . '<br>';
      }else{
        $body .= 'Email: ' . $values['bill_email'] . '<br>';
      }
      
      $body .= 'Sign up newsletter: ' . $values['bill_subcribe_newsletter'] . '<br>';
      $body .= '</p>';
      
      //dedicate info
      if($values['donation_type_select'] == 'In Memoriam' || $values['donation_type_select'] == 'In Honor'){
        $body .= '<p>';
        $body .= '----Information of '. $values['donation_type_select'] .'-----<br>';
        $body .= 'Name: ' . $values['dedicate_name'] . '<br>';
        $body .= '</p>';
        
        if( $values['donation_acknowledgement_question'] == 1 && $values['ack_type'] == MAIL_CARD){
          $body .= '<p>';
          $body .= '-----Mail an acknowledgement card to person below----<br>';
          $body .= 'Title: ' . $values['ack_title'] . '<br>';
          $body .= 'First name: ' . $values['ack_fname'] . '<br>';
          $body .= 'Middle name: ' . $values['ack_midname'] . '<br>';
          $body .= 'Last name: ' . $values['ack_lname'] . '<br>';
          $body .= 'Address 1: ' . $values['ack_address1'] . '<br>';
          $body .= 'Address 2: ' . $values['ack_address2'] . '<br>';
          $body .= 'City: ' . $values['ack_city'] . '<br>';
          $body .= 'State: ' . $values['ack_states'] . '<br>';
          $body .= 'Zipcode: ' . $values['ack_zipcode'] . '<br>';
          $body .= 'Message: ' . $values['ack_message'] . '<br>';
          $body .= 'Sender name: ' . $values['ack_sender_name'] . '<br>';
          $body .= '</p>';
        }else if ($values['ack_type'] == EMAIL_CARD) {
          $body .= '<p>';
          $body .= 'An acknowledgement email card has been sent.';
          $body .= '</p>';
        }
        
      }
      
      //thank you info
      if($values['thank_you_type'] == MAIL_CARD){
        $body .= '</p>';
        $body .= 'Mail a thank you letter type: Mail a card<br>';
        $body .= '</p>';
      }else{
        $body .= '</p>';
        $body .= 'Mail a thank you letter type: Email a card<br>';
        $body .= '</p>';
      }
      
      $message['body'][] = $body;
      
      //$message['body'][] = 'Donation amount: ' . $params['donation_type_select'];
      
      break;
  }  
  
}



function temp_donate_form_mail_send_contributor($form_values) {
  // All  mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'Temporary_Donation_page';
  $key = 'donation_information';

  // Specify 'to' and 'from' addresses.
  $to = $form_values['bill_email'];
  $from = 'no-reply@hjf.org';

  $params = $form_values;

  $language = language_default();

  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  
  
  if ($result['result'] == TRUE) {
    drupal_set_message('A email is sent');
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }
 
}

function temp_donate_form_mail_send_navy($form_values) {
  // All  mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'Temporary_Donation_page';
  $key = 'donation_information';

  // Specify 'to' and 'from' addresses.
  $to = '';
  $to .= '';
  $to .= ',';
  $to .= ',';
  
  $from = 'no-reply@hjf.org';

  $params = $form_values;

  $language = language_default();

  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  
  /*
  if ($result['result'] == TRUE) {
    drupal_set_message('A email is sent');
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }
  */
}



function temp_donate_form_payleap_credit_card_single_transaction() {
// build the HTTP request
  $args = "&Username=Ibrahima5290_API "; //Your API Username which can be located in your PayLeap merchant interface 
$args .= "&Password=Xa3nfXx`9^w`QX6G"; //Your Transaction Key which can be located in your PayLeap merchant interface 
$args .= "&TransType=Sale"; // Review guide for transaction types 
$args .= "&NameOnCard=John Doe"; 
$args .= "&CardNum=4111111111111111"; 
$args .= "&ExpDate=1215"; //MMYY Format 
$args .= "&CVNum=123"; 
$args .= "&Amount=1.00"; 
//$args .= "&ExtData="; 

//ExtData example using form fields and hard coded values 
$args .= "&ExtData=<CustomerTokenization>T</CustomerTokenization><TrainingMode>F</TrainingMode><Invoice><InvNum>111</InvNum><BillTo><Name>".$_POST['nameoncard']."</Name><Address>
<Street>".$_POST['street']."</Street><City>".$_POST['city']."</City><State>".$_POST['state']."</State><Zip>".$_POST['zip']."</Zip><Country>USA</Country></Address><Email>test@test.com</Email><Phone>5555551212</Phone> 
//</BillTo><Description>Test Transaction</Description></Invoice>"; 
$args .= "&PNRef="; 
$args .= "&MagData="; 

  $result = temp_donate_form_payleap_send($args, "https://uat.payleap.com/TransactServices.svc/ProcessCreditCard");

  // display results
//	drupal_set_message( htmlentities($result) ) ;
  
 // $result = '<Response xmlns="http://www.payleap.com/payments" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><AuthCode>12022013014959</AuthCode><GetAVSResult>Y</GetAVSResult><GetCVResult>M</GetCVResult><GetCommercialCard>false</GetCommercialCard><HostCode>3e198db3-41e8-4a12-bb4d-23822f286060</HostCode><Message>APPROVAL</Message><PNRef>78938</PNRef><ProcessedAsCreditCard>TRUE</ProcessedAsCreditCard><RespMSG>Approved</RespMSG><Result>0</Result></Response>';

  variable_set('payleap_result_XML', $result);
}



function temp_donate_form_payleap_send($packet, $url) {
  $header = array("MIME-Version: 1.0","Content-type: application/x-www-form-urlencoded","Contenttransfer-encoding: text");
  $ch = curl_init();

  // set URL and other appropriate options
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 1);
  curl_setopt ($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
  // uncomment for host with proxy server
  // curl_setopt ($ch, CURLOPT_PROXY, "http://proxyaddress:port");
  curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $packet);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt ($ch, CURLOPT_TIMEOUT, 10);

  // send packet and receive response
  $response = curl_exec($ch);
  curl_close($ch);
  return($response);
}

